{"version":3,"file":"static/js/353.4f84e2d8.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport './Form.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from './../../redux/contactsSlice';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.item);\n\n  const [state, setState] = useState({ name: '', number: '' });\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkContactName(state.name)) {\n      alert(`${state.name} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: state.name,\n        number: state.number,\n        id: nanoid(),\n      })\n    );\n    reset();\n  };\n\n  const reset = () => {\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setState(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const checkContactName = q => {\n    return contacts.some(({ name }) => name.toLowerCase() === q.toLowerCase());\n  };\n\n  return (\n    <form className=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n      <label htmlFor={nameId} className=\"form-label\">\n        Name\n        <input\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className=\"form-input\"\n          value={state.name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label htmlFor={numberId} className=\"form-label\">\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className=\"form-input\"\n          value={state.number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <div className=\"form-decor\">\n        <button className=\"form-button\" type=\"submit\">\n          Add contacts\n        </button>\n      </div>\n    </form>\n  );\n};\n","import './Filter.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from './../../redux/filtersSlice';\n\nexport const Filter = ({ value }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"filter-label\">\n      Find contact by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n        className=\"filter-input\"\n      />\n    </label>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './Contact.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from './../../redux/contactsSlice';\nimport { fetchContacts } from './../../redux/contactsSlice';\n\nexport const Contact = () => {\n  const contacts = useSelector(state => state.contacts.item);\n  const filter = useSelector(state => state.filter);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const deleteContactHandler = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = getVisibleContacts();\n\n  return (\n    <>\n      {isLoading && <div>Loading...</div>}\n      {error && <div>Something went wrong...</div>}\n      {filteredContacts.length !== 0 ? (\n        <ul>\n          {filteredContacts.map(contact => {\n            const { id, name, number } = contact;\n            return (\n              <li key={id} className=\"contact-item\">\n                <p className=\"contact-text\">\n                  {name}: {number}\n                </p>\n                <button\n                  className=\"contact-button\"\n                  type=\"button\"\n                  onClick={() => deleteContactHandler(id)}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className=\"heading\">No contacts</p>\n      )}\n    </>\n  );\n};\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { Contact } from 'components/Contact/Contact';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\n\nexport default function Contacts() {\n  return (\n    <div className=\"content\">\n      <h1 className=\"heading\">Phonebook</h1>\n      <Form />\n      <h2 className=\"heading\">Contacts</h2>\n      <Filter />\n      <Contact />\n    </div>\n  );\n}\n   "],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","dispatch","useDispatch","contacts","useSelector","state","item","_useState","useState","name","number","_useState2","_slicedToArray","setState","nameId","numberId","reset","handleChange","e","_e$currentTarget","currentTarget","value","prevState","_objectSpread","_defineProperty","checkContactName","q","some","_ref","toLowerCase","_jsxs","className","autoComplete","onSubmit","preventDefault","alert","concat","addContact","children","htmlFor","_jsx","type","title","required","onChange","Filter","setFilter","Contact","filter","isLoading","error","useEffect","fetchContacts","filteredContacts","includes","_Fragment","map","contact","onClick","deleteContact","deleteContactHandler","Contacts"],"sourceRoot":""}